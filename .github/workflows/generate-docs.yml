name: Generate Salesforce Docs

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  generate-docs:
    runs-on: ubuntu-latest

    env:
      API_TOKEN: ${{ secrets.API_TOKEN }}
      API_BASE_URL: https://api.prd.ultragas.ai-impact.gft-cloud.com
      LANG: pt-BR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm install -g @mermaid-js/mermaid-cli
          npm install puppeteer markdown-it node-fetch formdata-node form-data-encoder
          sudo apt-get install -y jq

      - name: Create output folder
        run: mkdir -p output

      - name: Find Salesforce files
        id: detect
        run: |
          find force-app/main/default -type f \( \
            -name "*.cls" -path "*/classes/*" -o \
            -name "*.trigger" -path "*/triggers/*" -o \
            -name "*.js" -path "*/lwc/*" -o \
            -name "*.flow-meta.xml" -path "*/flows/*" \
          \) > files.txt
          cat files.txt

      - name: Process and generate PDFs
        run: |
          mkdir -p docs

          while IFS= read -r filepath; do
            filename=$(basename "$filepath")

            if [[ "$filepath" == *"/classes/"* ]]; then
              language="Java"
            elif [[ "$filepath" == *"/triggers/"* ]]; then
              language="Java"
            elif [[ "$filepath" == *"/lwc/"* ]]; then
              language="Java"
            elif [[ "$filename" == *"flow-meta.xml" ]]; then
              language="PHP"
            else
              echo "❌ Ignorando arquivo não reconhecido: $filepath"
              continue
            fi

            echo "📤 Enviando $filename para API..."
            for attempt in {1..3}; do
              response=$(curl -s -X POST "$API_BASE_URL/ai/document" \
                -H "Authorization: Bearer $API_TOKEN" \
                -F "files=@$filepath" \
                -F "RunName=Doc" \
                -F "JobName=DemoDocCreator" \
                -F "DocumentationFormat=markdown" \
                -F "DiagramFormat=mermaid" \
                -F "SourceCodeLanguage=$language" \
                -F "DocumentationAudience=Software Engineer" \
                -F "PromptId=DocumentCode_CLI" \
                -F "TargetExtension=md" \
                -F "Llm=GPT_4o_USA" \
                -F "AdditionalInstructions=Generate this documentation in Portuguese - BR")

              job_id=$(echo "$response" | jq -r 'select(type=="string") // .jobId // . // empty')

              if [[ -n "$job_id" && "$job_id" != "null" ]]; then
                echo "✅ Job ID recebido: $job_id"
                break
              else
                echo "⚠️ Tentativa $attempt falhou. Esperando 10 segundos..."
                echo "Resposta da API: $response"
                sleep 10
              fi
            done

            if [[ -z "$job_id" || "$job_id" == "null" ]]; then
              echo "❌ Não foi possível obter o jobId para $filename"
              continue
            fi

            echo "⏳ Aguardando conclusão do job..."
            for i in {1..30}; do
              status_response=$(curl -s -H "Authorization: Bearer $API_TOKEN" "$API_BASE_URL/ai/jobs/$job_id/status")
              status=$(echo "$status_response" | jq -r '.status')
              uri=$(echo "$status_response" | jq -r '.results[0].output[0].uri // empty')

              if [[ "$status" == "Completed" && -n "$uri" ]]; then
                echo "✅ Job finalizado. Baixando Markdown..."

                md_url="$API_BASE_URL$uri"
                md_file="output/${filename}.md"
                html_file="output/${filename}.html"
                pdf_file="docs/${filename}.pdf"

                curl -s -H "Authorization: Bearer $API_TOKEN" "$md_url" -o "$md_file"
                npx -y markdown-it "$md_file" > "$html_file"

                node -e "
                const puppeteer = require('puppeteer');
                (async () => {
                  const browser = await puppeteer.launch();
                  const page = await browser.newPage();
                  await page.goto('file://$(pwd)/$html_file', { waitUntil: 'networkidle0' });
                  await page.pdf({ path: '$pdf_file', format: 'A4' });
                  await browser.close();
                })();"

                echo "📄 PDF salvo em: $pdf_file"
                break
              fi

              sleep 2
            done
          done < files.txt

      - name: Commit generated PDFs to docs folder
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add docs/
          git commit -m "docs: update generated PDFs" || echo "Nenhuma alteração para commitar"
          git push
