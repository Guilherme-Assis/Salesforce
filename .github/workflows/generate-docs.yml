name: Generate LWC Docs (Parallel)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  generate-docs:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        shard: [0, 1, 2, 3]

    env:
      API_TOKEN: ${{ secrets.API_TOKEN }}
      API_BASE_URL: https://api.prd.ultragas.ai-impact.gft-cloud.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm install -g @mermaid-js/mermaid-cli
          npm install puppeteer markdown-it
          sudo apt-get install -y jq

      - name: Prepare output folders
        run: mkdir -p output docs

      - name: Find and filter LWC files for this shard
        run: |
          SHARD_ID=${{ matrix.shard }}
          echo "🧩 Este é o SHARD $SHARD_ID (LWC only)"

          find force-app/main/default -type f -name "*.js" -path "*/lwc/*" \
            | sort | awk -v shard=$SHARD_ID '{ if (NR % 4 == shard) print }' > files-to-process.txt

          echo "Arquivos LWC para este shard:"
          cat files-to-process.txt

      - name: Process LWC files
        run: |
          while IFS= read -r filepath; do
            filename=$(basename "$filepath")
            language="Java"

            echo "📤 Enviando $filename para API..."
            for attempt in {1..3}; do
              response=$(curl -s -X POST "$API_BASE_URL/ai/document" \
                -H "Authorization: Bearer $API_TOKEN" \
                -F "files=@$filepath" \
                -F "RunName=Doc" \
                -F "JobName=DemoDocCreator" \
                -F "DocumentationFormat=markdown" \
                -F "DiagramFormat=mermaid" \
                -F "SourceCodeLanguage=$language" \
                -F "DocumentationAudience=Software Engineer" \
                -F "PromptId=DocumentCode_CLI" \
                -F "TargetExtension=md" \
                -F "Llm=GPT_4o_USA" \
                -F "AdditionalInstructions=Generate this documentation in Portuguese - BR")

              job_id=$(echo "$response" | tr -d '\r\n')

              if [[ -n "$job_id" && "$job_id" != "null" ]]; then
                echo "✅ Job ID recebido: $job_id"
                break
              else
                echo "⚠️ Tentativa $attempt falhou. Resposta da API: $response"
                sleep 10
              fi
            done

            if [[ -z "$job_id" || "$job_id" == "null" ]]; then
              echo "❌ Não foi possível obter o jobId para $filename"
              continue
            fi

            echo "⏳ Aguardando conclusão do job..."
            uri=""
            for i in {1..30}; do
              status_response=$(curl -s -H "Authorization: Bearer $API_TOKEN" "$API_BASE_URL/ai/jobs/$job_id/status")
              status=$(echo "$status_response" | jq -r '.status')
              uri=$(echo "$status_response" | jq -r '.results[0].output[0].uri // empty')

              echo "🔁 Tentativa $i – status: $status | uri: $uri"

              if [[ "$status" == "Completed" && -n "$uri" ]]; then
                echo "✅ Job finalizado. Baixando Markdown..."
                break
              fi

              sleep 2
            done

            if [[ -z "$uri" ]]; then
              echo "❌ Tempo limite excedido. URI não disponível para $filename"
              continue
            fi

            md_url="$API_BASE_URL$uri"
            md_file="output/${filename}.md"
            html_file="output/${filename}.html"
            pdf_file="docs/${filename}.pdf"

            curl -s -H "Authorization: Bearer $API_TOKEN" "$md_url" -o "$md_file"

            export MD_PATH="$md_file"
            echo "Substituindo blocos Mermaid..."
            cat > replaceMermaid.js <<'EOF'
            const fs = require('fs');
            const { execSync } = require('child_process');
            const mdPath = process.env.MD_PATH;
            let content = fs.readFileSync(mdPath, 'utf8');
            const matches = [...content.matchAll(/```mermaid\n([\s\S]*?)\n```/g)];
            
            matches.forEach((match, i) => {
              const diagram = match[1];
              const mmdFile = `output/tmp_${i}.mmd`;
              const pngFile = `output/diagram_${i}.png`;
              fs.mkdirSync('output', { recursive: true });
              fs.writeFileSync(mmdFile, diagram);
              execSync(`mmdc -i ${mmdFile} -o ${pngFile} -b transparent`);
              const base64 = fs.readFileSync(pngFile).toString('base64');
              const imgTag = `<img src=\"data:image/png;base64,${base64}\" />`;
              content = content.replace(match[0], imgTag);
              fs.unlinkSync(mmdFile);
              fs.unlinkSync(pngFile);
            });
            fs.writeFileSync(mdPath, content);
            EOF

            node replaceMermaid.js

            npx -y markdown-it "$md_file" > "$html_file"

            node -e "
              const puppeteer = require('puppeteer');
              (async () => {
                const browser = await puppeteer.launch({
                  args: ['--no-sandbox', '--disable-setuid-sandbox']
                });
                const page = await browser.newPage();
                await page.goto('file://' + process.cwd() + '/$html_file', { waitUntil: 'networkidle0' });
                await page.pdf({ path: '$pdf_file', format: 'A4' });
                await browser.close();
              })();"

            echo "📄 PDF salvo em: docs/${filename}.pdf"

          done < files-to-process.txt

      - name: Commit generated PDFs
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

          git fetch origin main
          git reset --soft origin/main

          git add -A
          git commit -m "docs(shard-${{ matrix.shard }}): update LWC PDFs" || echo "Nenhuma alteração para commitar"

          for i in {1..3}; do
            git pull --rebase && git push && break
            echo "🔁 Tentativa $i de push falhou. Tentando novamente em 5s..."
            sleep 5
          done
